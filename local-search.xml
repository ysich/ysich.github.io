<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>游戏资源管理</title>
    <link href="/2023/01/16/%E6%B8%B8%E6%88%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    <url>/2023/01/16/%E6%B8%B8%E6%88%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="游戏资源管理"><a href="#游戏资源管理" class="headerlink" title="游戏资源管理"></a>游戏资源管理</h1><p>游戏运行就是一个接一个资源的展示，如何管理好这些展示的资源让游戏能够流畅运行在开发中非常重要。需要在合理的地方调用、加载资源，资源空闲时对其进行卸载以减少内存占用。当内存超出预算可能导致游戏闪退，所以对资源的管理实际就是对内存的优化！</p><p>本文争取一文搞懂资源管理。PS：可能和一个视频学完c++差不多(一个视频一个多月)</p><p>TODOLIST：</p><ul><li><input disabled="" type="checkbox"> 分包策略</li><li><input disabled="" type="checkbox"> 依赖处理</li><li><input disabled="" type="checkbox"> AssetBundle详细</li><li><input disabled="" type="checkbox"> 热更<ul><li><input disabled="" type="checkbox"> 断点续传</li><li><input disabled="" type="checkbox"> 代码热更新/热重载<ul><li><input disabled="" type="checkbox"> Lua重新将函数指针赋值的策略</li><li><input disabled="" type="checkbox"> HybridCLR</li></ul></li></ul></li><li><input disabled="" type="checkbox"> 资源包和资源区分开</li><li><input disabled="" type="checkbox"> 一些资源策略<ul><li><input disabled="" type="checkbox"> 整包只有基础内容，后续章节热更的形式(大资源情况)</li></ul></li><li><input disabled="" type="checkbox"> YooAsset扩展篇</li></ul><h2 id="资源管理主要的需求有哪些？"><a href="#资源管理主要的需求有哪些？" class="headerlink" title="资源管理主要的需求有哪些？"></a>资源管理主要的需求有哪些？</h2><ul><li>为开发与正式版本提供资源的加载和卸载</li><li>支持远程更新资源</li><li>做好版本、平台、渠道的资源管理</li><li>内存优化</li></ul><h2 id="Unity中的两种加载方式"><a href="#Unity中的两种加载方式" class="headerlink" title="Unity中的两种加载方式"></a>Unity中的两种加载方式</h2><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><ul><li>资源必选放在Resources文件夹下；有容量上限(大概是2G)；重复加载和重复卸载操作，Unity做了容错处理不会报错。不支持热更，只能打整包</li><li>适合放游戏的启动逻辑需要的资源</li><li>可能会延长游戏启动时间</li></ul><h3 id="AssetBundle"><a href="#AssetBundle" class="headerlink" title="AssetBundle"></a>AssetBundle</h3><ul><li>可以理解成Unity内的资源压缩包，有不同的压缩方式，解压速度和包体大小也不同(LZMA 和 LZ4)。</li><li>适合做热更，以减少包体的初始大小。</li><li>已加载的资源不允许重复加载，会报错。而使用AssetDatabase则不需要考虑。需要使用引用计数。</li></ul><p>这里还有一些开源的资源管理系统，如YooAsset。</p><h2 id="同步加载与异步加载"><a href="#同步加载与异步加载" class="headerlink" title="同步加载与异步加载"></a>同步加载与异步加载</h2><h3 id="同步加载"><a href="#同步加载" class="headerlink" title="同步加载"></a>同步加载</h3><p>同步加载在加载资源时，会阻塞线程。等加载逻辑完成后才继续执行后续逻辑（图灵机）</p><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>同步加载在加载较大资源时阻塞明显，造成卡顿。因为Unity中所有的渲染都是放在主线程中的，所以主线程阻塞非常致命不能进行任何玩家操作。</p><p>所以需要使用另外一种加载方式对较大资源进行加载。异步加载使用协程/线程进行加载逻辑，等资源加载完毕后触发资源加载后的callback。</p><p>在一些资源的加载会影响到游戏的展示时，可以在需要之前对资源进行预先加载，保证流程能够顺利进行。</p><h4 id="异步加载的三种状态"><a href="#异步加载的三种状态" class="headerlink" title="异步加载的三种状态"></a>异步加载的三种状态</h4><p>异步加载的逻辑由于执行完成的时间不确定，可能会导致其他逻辑的冲突。所以我们给异步加载按照逻辑划分状态，好让其他逻辑能够做区分，不同状态下处理相应的操作。</p><ul><li><p>未加载</p><p>异步加载还没开始时可能需要准备的事情，比如资源包不在本地需要下载、解密、解压等等。</p></li><li><p>加载中</p><p>资源开始加载后，其他业务逻辑也加载了相同资源时，可以判断这个资源的状态。正在加载则不再进行加载前的准备操作，并把加载后的callback注册进去。</p></li><li><p>已加载</p><p>主要为加载后触发相应callback。</p></li></ul><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> LoaderState<br>  {<br>      NONE,           <span class="hljs-comment">// 默认</span><br>      LOADING,        <span class="hljs-comment">// 加载中</span><br>      FINISHED,       <span class="hljs-comment">// 完成</span><br>  }<br></code></pre></td></tr></tbody></table></figure><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>玩家在进入一个场景后，假设资源预加载需要10s，玩家却在未加载完资源的过程中退出场景。这时候就会引发资源状态的问题。</p><h2 id="资源缓存池"><a href="#资源缓存池" class="headerlink" title="资源缓存池"></a>资源缓存池</h2><p>资源缓存池为统一存储和调用资源的地方。在加载资源后统一存入池子中，卸载时则将其从池子中删除。</p><p>加载时先判断池子中是否存在此资源包，如果已经加载过了直接则直接使用，未加载再进行加载逻辑。</p><p>以下内容主要以AssetBundle举例</p><figure class="highlight cc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cc"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssetBundlePool</span>{<br><span class="hljs-keyword">private</span> Dictionary&lt;string,AssetBundleInfo&gt; m_LoadAssetBundle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Dictionary</span>&lt;string,AssetBundleInfo&gt;();<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>引用技术的应用范围很广，很多引擎、框架、插件的底层都离不开引用计数。</p><p>简单思想：被引用+1，不被引用时-1，当为0时触发清空逻辑。</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IRefCounter</span><br>{<br>    <span class="hljs-built_in">int</span> RefCount { <span class="hljs-keyword">get</span>; }<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Retain</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Release</span>()</span>;<br>}<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SimpleRC</span> : <span class="hljs-title">IRefCounter</span><br>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> RefCount { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; }<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Retain</span>()</span><br>    {<br>        RefCount++;<br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Release</span>()</span><br>    {<br>        RefCount--;<br>        <span class="hljs-keyword">if</span> (RefCount == <span class="hljs-number">0</span>){ OnZeroRef(); }<br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnZeroRef</span>()</span>{}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="与资源管理结合的引用计数"><a href="#与资源管理结合的引用计数" class="headerlink" title="与资源管理结合的引用计数"></a>与资源管理结合的引用计数</h3><p>资源被使用时引用次数+1，资源解除使用时次数-1，当引用次数为0时则进行卸载逻辑。</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AssetBundleInfo</span><br>{<br>    <span class="hljs-keyword">private</span> AssetBundle m_AssetBundle;   <span class="hljs-comment">//AB包引用</span><br>    <span class="hljs-keyword">public</span> AssetBundle AssetBundle { <span class="hljs-keyword">get</span> { <span class="hljs-keyword">return</span> m_AssetBundle; } }<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> m_ReferencedCount;           <span class="hljs-comment">//引用计数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AssetBundleInfo</span>(<span class="hljs-params">AssetBundle assetBundle</span>)</span><br>    {<br>        m_AssetBundle = assetBundle;<br>        m_ReferencedCount = <span class="hljs-number">1</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="与资源缓冲池结合的加载"><a href="#与资源缓冲池结合的加载" class="headerlink" title="与资源缓冲池结合的加载"></a>与资源缓冲池结合的加载</h3><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AssetBundlePool</span>{<br><span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>,AssetBundleInfo&gt; m_LoadAssetBundle = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>,AssetBundleInfo&gt;();<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> AssetBundle <span class="hljs-title">LoadAssetsFromAB</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName</span>)</span><br>    {<br>        AssetBundleInfo assetBundleInfo = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (m_LoadAssetBundle.TryGetValue(abName, <span class="hljs-keyword">out</span> assetBundleInfo))<br>        {   <span class="hljs-comment">//检查是否加载过</span><br>            assetBundleInfo.m_ReferencedCount++;<span class="hljs-comment">//这里可以使用封装好的引用计数，为了方便展示直接使用</span><br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            <span class="hljs-built_in">string</span> loadPath = PathUnit.DataPath + PathUnit.ABRootPath + abName;<br>            <span class="hljs-keyword">var</span> ab = AssetBundle.LoadFromFile(loadPath);<br>            <span class="hljs-keyword">if</span> (ab <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>)<br>            {<br>                Debug.Log(<span class="hljs-string">"AB包加载失败！"</span>+ loadPath);<br>            }<br>            <span class="hljs-keyword">else</span><br>            {<br>                assetBundleInfo = <span class="hljs-keyword">new</span> AssetBundleInfo(ab);<br>                m_LoadAssetBundle.Add(abName, assetBundleInfo);<br>                <span class="hljs-comment">//assetBundleInfo.m_ReferencedCount++;这里不需要加了因为默认值为1</span><br>            }<br>        }<br>        <span class="hljs-keyword">return</span> assetBundleInfo.AssetBundle;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>异步加载也是相同的操作，但有点不同。需要一个额外的队列记录加载中的文件。当加载中的文件又收到了加载请求时，则需要在列表中查找是否正在加载。</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AssetBundleCachePool</span><br>{<br>    <span class="hljs-keyword">public</span> MonoBehaviour monoBehaviour;<br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, AssetBundleInfo&gt; m_LoadAssetBundle = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, AssetBundleInfo&gt;();<br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Action&lt;AssetBundle&gt;&gt; m_LoadingAssetBundle = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Action&lt;AssetBundle&gt;&gt;();<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadAssetsFormAbAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, Action&lt;AssetBundle&gt; loadingABAction</span>)</span><br>    {<br>        monoBehaviour.StartCoroutine(OnLoadAssetsFormAbAsync(abName, loadingABAction));<br>    }<br>    <span class="hljs-function">IEnumerator <span class="hljs-title">OnLoadAssetsFormAbAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, Action&lt;AssetBundle&gt; loadingABAction</span>)</span><br>    {<br>        AssetBundleInfo assetBundleInfo = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (m_LoadAssetBundle.TryGetValue(abName,<span class="hljs-keyword">out</span> assetBundleInfo))<br>        {<br>            Debug.Log(<span class="hljs-string">"已加载过"</span>);<br>            AssetBundle assetBundle = assetBundleInfo.AssetBundle;<br>            <span class="hljs-comment">//引用计数+1</span><br>            assetBundleInfo.m_ReferencedCount++;<br>            <span class="hljs-comment">//触发回调</span><br>            <span class="hljs-keyword">if</span> (loadingABAction != <span class="hljs-literal">null</span>)<br>            {<br>                loadingABAction.Invoke(assetBundle);<br>            }<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">break</span>;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            <span class="hljs-keyword">if</span> (m_LoadingAssetBundle.TryGetValue(abName,<span class="hljs-keyword">out</span> Action&lt;AssetBundle&gt; temploadingABAction))<br>            {<br>                <span class="hljs-keyword">if</span> (loadingABAction != <span class="hljs-literal">null</span>) { temploadingABAction += loadingABAction; }<br>                Debug.Log(<span class="hljs-string">"正在被加载"</span>);<br>                <span class="hljs-keyword">yield</span> <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-keyword">else</span><br>            {<br>                <span class="hljs-comment">//这步需要执行，避免与其他逻辑冲突</span><br>                m_LoadingAssetBundle.Add(abName, loadingABAction);<br>                <span class="hljs-built_in">string</span> loadPath = PathUnit.DataPath + PathUnit.ABRootPath + abName;<br>                AssetBundleCreateRequest assetBundleCreateRequest = AssetBundle.LoadFromFileAsync(loadPath);<br>                AssetBundle resAB = assetBundleCreateRequest.assetBundle;<br>                <span class="hljs-keyword">if</span> (resAB <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>)<br>                {<br>                    Debug.LogError(<span class="hljs-string">"AB包不能存在"</span>);<br>                }<br>                <span class="hljs-keyword">else</span><br>                {<br>                    assetBundleInfo = <span class="hljs-keyword">new</span> AssetBundleInfo(resAB);<br>                    m_LoadAssetBundle.Add(abName, assetBundleInfo);<br>                }<br>                <span class="hljs-comment">//加载完成移除加载中列表</span><br>                <span class="hljs-comment">//避免啥异常状况，保险点！先判断是否存在</span><br>                <span class="hljs-keyword">if</span> (m_LoadingAssetBundle.ContainsKey(abName))<br>                {<br>                    Action&lt;AssetBundle&gt; action = m_LoadingAssetBundle[abName];<br>                    m_LoadingAssetBundle.Remove(abName);<br>                    <span class="hljs-keyword">var</span> callBackList =  action.GetInvocationList();<br>                    <span class="hljs-keyword">foreach</span> (Action&lt;AssetBundle&gt; callBack <span class="hljs-keyword">in</span> callBackList)<br>                    {<br>                        callBack.Invoke(resAB);<br>                    }<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="与资源缓冲池结合的卸载"><a href="#与资源缓冲池结合的卸载" class="headerlink" title="与资源缓冲池结合的卸载"></a>与资源缓冲池结合的卸载</h3><p>为了保持<code>平衡</code>有了加载就一定会有卸载。但是在游戏中(特别是手游)卸载操作需要加上一些限制，因为在短时间内进行了大量资源的卸载增加了大量的IO操作也会造成卡顿（线程阻塞）的。🙂</p><p>所以我们的卸载操作需要与数量和时间扯上关系，在一定时间内只卸载一定数量的资源。</p><p>在引用计数中，如果引用计数为0则标记为可以开始卸载了。</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AssetBundleInfo</span>{<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ReferencedCount { <br>        <span class="hljs-keyword">get</span> { <span class="hljs-keyword">return</span> m_ReferencedCount; } <br>        <span class="hljs-keyword">set</span> {<br>            m_ReferencedCount = <span class="hljs-keyword">value</span>;<br>            <span class="hljs-keyword">if</span> (m_ReferencedCount&lt;= <span class="hljs-number">0</span>)<br>                IsUnLoadFlag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span><br>                IsUnLoadFlag = <span class="hljs-literal">false</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsUnLoadFlag { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; }<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_ReferencedCount;           <span class="hljs-comment">//引用计数</span><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="与时间挂钩"><a href="#与时间挂钩" class="headerlink" title="与时间挂钩"></a>与时间挂钩</h4><p>与时间挂钩就需要有个地方能够一直统计和计算我们的时间并进行回收</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceManager</span>{<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>{<br>        <br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>本文之前的代码都是没有考虑依赖的，所以如果真的跑起来会发现计数会有偏差。</p><p>一个资源身上用到了别的AB包中的资源，这时候如果只加载自身的AB包，就会出现资源丢失的情况。这时候就需要把当前资源需要用到的依赖包一起加载出来。</p><p>但是我们又要怎么知道这个资源依赖于哪些包？</p><p>这时候就需要用到Unity提供的AB包依赖文件来判断，后缀<code>.manifest·</code>。</p><h2 id="AssetBundle篇"><a href="#AssetBundle篇" class="headerlink" title="AssetBundle篇"></a>AssetBundle篇</h2><p>Todo<span class="github-emoji"><span>💁♀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481-2640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>这部分以前的笔记找不到了，先欠着。</p><h2 id="热更篇"><a href="#热更篇" class="headerlink" title="热更篇"></a>热更篇</h2><p>Todo<span class="github-emoji"><span>💁♀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481-2640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>这部分内容写在别的地方，比较乱后续整理。</p>]]></content>
    
    
    <categories>
      
      <category>资源管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua入门</title>
    <link href="/2023/01/13/Lua%E5%85%A5%E9%97%A8/"/>
    <url>/2023/01/13/Lua%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Lua大纲"><a href="#Lua大纲" class="headerlink" title="Lua大纲"></a>Lua大纲</h1><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>循环用<code>do</code>，if语句用<code>then</code>，都使用<code>end</code>结尾</li><li>Lua不支持自减和自加操作，只能<code>i=i+1</code>，<code>i=i-1</code></li><li>字符串的第一个位置是1不是0</li></ul><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul><li>Lua的字符串可以存储<code>0x00</code>，可以用字符串存储二进制流</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p> 用<code>--</code>开头，来写一段<code>单行注释</code> </p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 单行注释</span><br></code></pre></td></tr></tbody></table></figure><p> 用<code>--[[</code>开头，<code>]]</code>结尾，写一段多行注释。 </p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment">多行</span><br><span class="hljs-comment">注释</span><br><span class="hljs-comment">]]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>对一个变量进行赋值就相当于声明变量，与python相似</p><h3 id="声明的变量默认为全局变量"><a href="#声明的变量默认为全局变量" class="headerlink" title="声明的变量默认为全局变量"></a><strong>声明的变量默认为全局变量</strong></h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">a=<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>同时给多个变量赋值，多重赋值</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">a,b=<span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></tbody></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> b=<span class="hljs-number">2</span><br></code></pre></td></tr></tbody></table></figure><h3 id="nil类型"><a href="#nil类型" class="headerlink" title="nil类型"></a>nil类型</h3><p><strong>没有被声明过的变量都是nil</strong></p><p><strong>nil类型只有一个值，就是nil</strong></p><p>nil类似null类型  if(nil)为false</p><h3 id="number类型"><a href="#number类型" class="headerlink" title="number类型"></a>number类型</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--支持十六进制表示方法</span><br>a=<span class="hljs-number">0x11</span><span class="hljs-comment">--输出为17</span><br><span class="hljs-comment">--科学计数法</span><br>a=<span class="hljs-number">2e10</span><br></code></pre></td></tr></tbody></table></figure><h3 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h3><h4 id="单引号、双引号"><a href="#单引号、双引号" class="headerlink" title="单引号、双引号"></a>单引号、双引号</h4><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">a=<span class="hljs-string">"daeqeq"</span><br>b=<span class="hljs-string">'sdarrr'</span><br><span class="hljs-comment">--转义字符\n</span><br>d=<span class="hljs-string">"sdada\nsdar"</span><br></code></pre></td></tr></tbody></table></figure><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><p>多行文本无法使用转义字符</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">c=<span class="hljs-string">[[asdasfffrrqweqq]]</span><br></code></pre></td></tr></tbody></table></figure><h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><p>字符串连接符号<code>..</code></p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">a=<span class="hljs-string">"daeqeq"</span><br>b=<span class="hljs-string">'sdarrr'</span><br>c=a..b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"asdaf"</span>..<span class="hljs-string">"as232"</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="数值转字符串"><a href="#数值转字符串" class="headerlink" title="数值转字符串"></a>数值转字符串</h4><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">tostring</span>(<span class="hljs-number">10</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="字符串转数值"><a href="#字符串转数值" class="headerlink" title="字符串转数值"></a>字符串转数值</h4><p><code>tonumber</code>转换失败为nil</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">tonumber</span>(<span class="hljs-string">"193"</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">a=<span class="hljs-string">"daeqeq"</span><br><span class="hljs-built_in">print</span>(#a)<br><span class="hljs-comment">--等价于s:len()</span><br></code></pre></td></tr></tbody></table></figure><h4 id="string类型类似char数组"><a href="#string类型类似char数组" class="headerlink" title="string类型类似char数组"></a>string类型类似char数组</h4><p>Lua中string类型 类似于C里的字符数组，可以包含任意数值包括0x00，可以存储二进制流因为都是原原本本存储</p><h5 id="将ascii码转为字符串"><a href="#将ascii码转为字符串" class="headerlink" title="将ascii码转为字符串"></a>将ascii码转为字符串</h5><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">s=<span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(<span class="hljs-number">65</span>)<br>s=<span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(<span class="hljs-number">0x30</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x33</span>)<br></code></pre></td></tr></tbody></table></figure><h5 id="取出string中的某一位的ascii码"><a href="#取出string中的某一位的ascii码" class="headerlink" title="取出string中的某一位的ascii码"></a>取出string中的某一位的ascii码</h5><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">n=<span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(s,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-comment">--语法糖，第一个到最后一个</span><br>s:<span class="hljs-built_in">byte</span>(<span class="hljs-number">1</span>，<span class="hljs-number">-1</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>调用c的接口</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> f=<span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"%d,%d"</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(f)<br></code></pre></td></tr></tbody></table></figure><h2 id="function函数"><a href="#function函数" class="headerlink" title="function函数"></a>function函数</h2><p>函数默认返回值为nil，没有任何返回值则为nil</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">function_name</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--body</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--函数名放前面</span><br>f=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>    <span class="hljs-comment">--body</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">(a,b,c)</span></span><br>    <span class="hljs-built_in">print</span>(a,b,c)<br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--c没有传值则为nil</span><br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<span class="hljs-comment">--1</span><br></code></pre></td></tr></tbody></table></figure><h3 id="函数可以返回多个值"><a href="#函数可以返回多个值" class="headerlink" title="函数可以返回多个值"></a>函数可以返回多个值</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">(a,b,c)</span></span><br>    <span class="hljs-keyword">return</span> a,b<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br></code></pre></td></tr></tbody></table></figure><h4 id="多个返回值可以使用多重赋值语句"><a href="#多个返回值可以使用多重赋值语句" class="headerlink" title="多个返回值可以使用多重赋值语句"></a>多个返回值可以使用多重赋值语句</h4><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">(a,b,c)</span></span><br>    <span class="hljs-keyword">return</span> a,b<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> i,j=f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><h3 id="table接口"><a href="#table接口" class="headerlink" title="table接口"></a>table接口</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(a,<span class="hljs-string">"d"</span>)<span class="hljs-comment">--插入元素，末尾添加</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(a,<span class="hljs-number">2</span>,<span class="hljs-string">"d"</span>)<span class="hljs-comment">--插入元素，第二个位置，后续元素后移</span><br><span class="hljs-keyword">local</span> s= <span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(a,<span class="hljs-number">2</span>)<span class="hljs-comment">--移除第2个元素</span><br></code></pre></td></tr></tbody></table></figure><h3 id="table数字下标"><a href="#table数字下标" class="headerlink" title="table数字下标"></a>table数字下标</h3><p>可以存所有东西(number,string,table,function)</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">a={<span class="hljs-number">1</span>,<span class="hljs-string">"ac"</span>,{},<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">end</span>}<br>a[<span class="hljs-number">5</span>]=<span class="hljs-number">123</span> <span class="hljs-comment">--可以直接添加一个元素</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>])<br><span class="hljs-comment">--获取table长度</span><br><span class="hljs-built_in">print</span>(#a)<br></code></pre></td></tr></tbody></table></figure><h3 id="table字符串下标"><a href="#table字符串下标" class="headerlink" title="table字符串下标"></a>table字符串下标</h3><p>以字符为table的下标</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua">a={<br>    a=<span class="hljs-number">1</span>,<br>    b=<span class="hljs-string">"1234"</span>,<br>    c=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-keyword">end</span>,<br>    d=<span class="hljs-number">123123</span><br>}<br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">"a"</span>])<br><span class="hljs-comment">--下标符合变量命名规范时</span><br><span class="hljs-built_in">print</span>(a.a)<br></code></pre></td></tr></tbody></table></figure><h3 id="全局表-G"><a href="#全局表-G" class="headerlink" title="全局表_G"></a>全局表_G</h3><p><strong>Lua内的所有全局变量都在_G这个table内</strong></p><p>包括<code>table.insert</code>中的table(也是全局变量)也存储在_G中，insert为table的下标</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">_G</span>[<span class="hljs-string">"table"</span>][<span class="hljs-string">"insert"</span>])<br><span class="hljs-comment">--function: 0000000063be4590</span><br><span class="hljs-comment">--输出值为一个函数</span><br><span class="hljs-comment">--多文件调用知识</span><br></code></pre></td></tr></tbody></table></figure><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><h3 id="不等于"><a href="#不等于" class="headerlink" title="不等于"></a>不等于</h3><p><strong>在Lua中不等于使用<code>~=</code>表示</strong></p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">a=<span class="hljs-literal">true</span><br>b=<span class="hljs-literal">false</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>&gt;=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>&lt;=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>==<span class="hljs-number">2</span>)<br><span class="hljs-comment">--不等于</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>~=<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h3><h3 id="只有false和nil表示假"><a href="#只有false和nil表示假" class="headerlink" title="只有false和nil表示假"></a>只有false和nil表示假</h3><p>其他都表示真，包括0</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> a)<br></code></pre></td></tr></tbody></table></figure><p><strong><code>and``or</code>返回的并不完全是true和false，会直接返回a或者b的值，可以通过短路求值</strong></p><p>只有<code>not</code>返回true和false</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">a=<span class="hljs-literal">nil</span> <span class="hljs-comment">--真</span><br>b=<span class="hljs-number">0</span>  <span class="hljs-comment">--假</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> b) <span class="hljs-comment">--nil</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> b)  <span class="hljs-comment">--0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> a)   <span class="hljs-comment">--true</span><br><span class="hljs-built_in">print</span>(b&gt;<span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-string">"yes"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"no"</span>) <span class="hljs-comment">--no</span><br></code></pre></td></tr></tbody></table></figure><h2 id="分支判断"><a href="#分支判断" class="headerlink" title="分支判断"></a>分支判断</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> <span class="hljs-number">1</span>&gt;<span class="hljs-number">10</span> <span class="hljs-keyword">then</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"1&gt;10"</span>)<br><span class="hljs-keyword">elseif</span> <span class="hljs-number">1</span>&lt;<span class="hljs-number">10</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"1&lt;10"</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"no"</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>,<span class="hljs-number">10</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--步长为2</span><br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h4 id="倒序循环"><a href="#倒序循环" class="headerlink" title="倒序循环"></a>倒序循环</h4><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i=<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><p><code>i</code>在过程途中不能赋值，赋值了也没用</p><p>假如对<code>i</code>赋值会被认定为新建了局部变量</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i=<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">local</span> i=<span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>通过break退出循环</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i=<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">5</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">break</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">n = <span class="hljs-number">10</span><br><span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(n)<br>    n = n - <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h3 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h3><p>和while循环基本一致</p><h2 id="多文件调用"><a href="#多文件调用" class="headerlink" title="多文件调用"></a>多文件调用</h2><h3 id="require和import的区别"><a href="#require和import的区别" class="headerlink" title="require和import的区别"></a>require和import的区别</h3><h4 id="require实现"><a href="#require实现" class="headerlink" title="require实现"></a>require实现</h4><p>换个目录后就需要对路径进行变更</p><p>个人理解：绝对路径</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> MyClassBase = <span class="hljs-built_in">require</span>(<span class="hljs-string">"app.classes.MyClassBase"</span>)<br><span class="hljs-keyword">local</span> MyClass = class(<span class="hljs-string">"MyClass"</span>, MyClassBase)<br><br><span class="hljs-keyword">local</span> Data1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">"app.classes.data.Data1"</span>)<br><span class="hljs-keyword">local</span> Data2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">"app.classes.data.Data2"</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="import实现"><a href="#import实现" class="headerlink" title="import实现"></a>import实现</h4><p>在模块名前添加多个”.” ，这样 import() 会从更上层的目录开始查找模块。</p><p>个人理解：相对路径</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> MyClassBase = import(<span class="hljs-string">".MyClassBase"</span>)<br><span class="hljs-keyword">local</span> MyClass = class(<span class="hljs-string">"MyClass"</span>, MyClassBase)<br><br><span class="hljs-keyword">local</span> Data1 = import(<span class="hljs-string">".data.Data1"</span>)<br><span class="hljs-keyword">local</span> Data2 = import(<span class="hljs-string">".data.Data2"</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><p>运行指定多文件</p><p>末尾不带扩展名</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--.\?lua   把文件名匹配到？内</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">"文件名"</span>)<br></code></pre></td></tr></tbody></table></figure><p>不同层架文件夹用<code>.</code>分隔</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span>(<span class="hljs-string">"文件夹名.文件名"</span>)<br></code></pre></td></tr></tbody></table></figure><p>只会运行一次</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--lua文件有可以return返回值</span><br><span class="hljs-keyword">local</span> r = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hello'</span>)<br><span class="hljs-comment">--后面调用的都是前面返回的内容</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">'hello'</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">'hello'</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">'hello'</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">'hello'</span>)<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></tbody></table></figure><h3 id="package-path"><a href="#package-path" class="headerlink" title="package.path"></a>package.path</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span>=<span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span>..<span class="hljs-string">";./path/?.lua"</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">'hello2'</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="多次调用"><a href="#多次调用" class="headerlink" title="多次调用"></a>多次调用</h3><p>调用lua文件内的函数</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--hello.lua</span><br><span class="hljs-keyword">local</span> hello={}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello.say</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"hello world"</span>)<br><span class="hljs-keyword">end</span><br>//通过返回<span class="hljs-built_in">table</span><br><span class="hljs-keyword">return</span> hello<br><br><span class="hljs-comment">--test.lua</span><br><span class="hljs-keyword">local</span> test=<span class="hljs-built_in">require</span>(<span class="hljs-string">'hello'</span>)<br>//通过<span class="hljs-built_in">table</span>内的方法调用<br>test.say()<br></code></pre></td></tr></tbody></table></figure><h2 id="迭代table"><a href="#迭代table" class="headerlink" title="迭代table"></a>迭代table</h2><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">t={<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>}<br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>,#t,<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(i,t[i])<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h3 id="迭代器ipairs"><a href="#迭代器ipairs" class="headerlink" title="迭代器ipairs"></a>迭代器ipairs</h3><p>纯数字连续下标可以用</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">t={<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>}<br><span class="hljs-comment">--下标给i，值给j</span><br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(t) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(i,j)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">t={<br>[<span class="hljs-number">1</span>]=<span class="hljs-string">"a"</span>,<br>[<span class="hljs-number">2</span>]=<span class="hljs-string">"b"</span>,<br>[<span class="hljs-number">3</span>]=<span class="hljs-string">"c"</span>,<br>[<span class="hljs-number">5</span>]=<span class="hljs-string">"d"</span><br>}<br><span class="hljs-comment">--下标给i，值给j</span><br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(t) <span class="hljs-keyword">do</span><br><span class="hljs-comment">--只能遍历到1到3，不连续的后面遍历不到</span><br>    <span class="hljs-built_in">print</span>(i,j)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h3 id="迭代器pairs"><a href="#迭代器pairs" class="headerlink" title="迭代器pairs"></a>迭代器pairs</h3><p>可以遍历所有下标</p><p>pairs内部调用的是<code>next</code>函数</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">t={<br>[<span class="hljs-number">1</span>]=<span class="hljs-string">"a"</span>,<br>[<span class="hljs-number">2</span>]=<span class="hljs-string">"b"</span>,<br>[<span class="hljs-number">3</span>]=<span class="hljs-string">"c"</span>,<br>[<span class="hljs-number">5</span>]=<span class="hljs-string">"d"</span><br>}<br><span class="hljs-comment">--下标给i，值给j</span><br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t) <span class="hljs-keyword">do</span><br><span class="hljs-comment">--只能遍历到1到3，不连续的后面遍历不到</span><br>    <span class="hljs-built_in">print</span>(i,j)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">t={<br>apple=<span class="hljs-string">"a"</span>,<br>banana=<span class="hljs-string">"b"</span>,<br>eraser=<span class="hljs-string">"c"</span>,<br>water=<span class="hljs-string">"d"</span><br>}<br><span class="hljs-comment">--下标给i，值给j</span><br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t) <span class="hljs-keyword">do</span><br><span class="hljs-comment">--只能遍历到1到3，不连续的后面遍历不到</span><br>    <span class="hljs-built_in">print</span>(i,j)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h2 id="元表、元方法"><a href="#元表、元方法" class="headerlink" title="元表、元方法"></a>元表、元方法</h2><h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">t={<br>a=<span class="hljs-number">0</span>,<br>add=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(tab,num)</span></span><br>tab.a=tab.a+num<br><span class="hljs-keyword">end</span><br>}<br><span class="hljs-comment">--类似于面向对象的方法调用</span><br>t:add(<span class="hljs-number">10</span>)<span class="hljs-comment">--等价于t.add(t,10)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--对象名</span><br>bag={}<br><br>bagmt={<br>    <span class="hljs-comment">--装入东西的函数</span><br>    put=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,item)</span></span><br>        <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(t.items,item)<br>        <span class="hljs-keyword">end</span>,<br>    take=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(t)<br>     <span class="hljs-keyword">end</span>,<br>    list=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(t.items,<span class="hljs-string">","</span>)<br>         <span class="hljs-keyword">end</span><br>}<br>bagmt[<span class="hljs-string">"__index"</span>]=bagmt<br><span class="hljs-comment">--构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bag.new</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">local</span> t={<br>        items={}<br>    }<br>    <span class="hljs-built_in">setmetatable</span>(t,bagmt)<br>    <span class="hljs-keyword">return</span> t<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure><h2 id="协程coroutine"><a href="#协程coroutine" class="headerlink" title="协程coroutine"></a>协程coroutine</h2><p>一个lua虚拟机里只能有一个线程</p><h3 id="coroutine-create-可创建一个协程"><a href="#coroutine-create-可创建一个协程" class="headerlink" title="coroutine.create 可创建一个协程"></a>coroutine.create 可创建一个协程</h3><p>返回值为 <code>thread </code>类型</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> co=<span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">create</span>(<br>    <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"hello world!"</span>)<br>    <span class="hljs-keyword">end</span><br>    )<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
